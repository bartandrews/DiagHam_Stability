////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                                                            //
//                            DiagHam  version 0.01                           //
//                                                                            //
//                  Copyright (C) 2001-2002 Nicolas Regnault                  //
//                                                                            //
//                                                                            //
//                   class of abstract random number generator                //
//                                                                            //
//                        last modification : 15/09/2004                      //
//                                                                            //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the GNU General Public License as published by    //
//    the Free Software Foundation; either version 2 of the License, or       //
//    (at your option) any later version.                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//    GNU General Public License for more details.                            //
//                                                                            //
//    You should have received a copy of the GNU General Public License       //
//    along with this program; if not, write to the Free Software             //
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#ifndef ABSTRACTRANDOMNUMBERGENERATOR_H
#define ABSTRACTRANDOMNUMBERGENERATOR_H


#include "config.h"


class AbstractRandomNumberGenerator
{
 protected:
  // flag indicating if a gaussian random number is stored
  int iset;
  // stored value of gaussian random number
  double gset;

 public:

  // virtual destructor
  //
  virtual ~AbstractRandomNumberGenerator();

  // clone random number generator 
  //
  // return value = clone of the random number generator
  virtual AbstractRandomNumberGenerator* Clone () = 0;

  // set seed of the random number generator
  //
  // seed = new seed
  virtual void SetSeed(const unsigned long& seed) = 0;

  // set seed of the random number generator to system time
  //
  virtual void UseTimeSeed();

  
  // get real random number between 0 and 1
  //
  // return value = random number
  virtual double GetRealRandomNumber() = 0;

  // get real random number with gaussian distribution (uses multiple calls to generator)
  //
  // return value = random number
  virtual double GetGaussianRandomNumber ();

  // get real random number with gaussian distribution with a given mean value and standard deviation (uses multiple calls to generator)
  //
  // meanValue = mean value (i.e <x>) of the gaussian distribution
  // deviation = standard deviation (i.e. sqrt(<x^2>-<x>^2)) of the gaussian distribution
  // return value = random number
  virtual double GetGaussianRandomNumber (double meanValue, double deviation);

  // get integer random number between 0 and GetMaxInteger
  //
  // return value = random number
  virtual unsigned long GetIntegerRandomNumber() = 0;
  
  // get maximum integer value that can be returned by GetIntegerRandomNumber
  //
  // return value = maximum integer
  virtual unsigned long GetMaxInteger() = 0;

  // get the number of random numbers that have been generated by the current generator
  //
  // return value = number of generated random numbers
  virtual unsigned long GetNbrGeneratedNumbers() = 0;
  

};


// get real random number with gaussian distribution with a given mean value and standard deviation (uses multiple calls to generator)
//
// meanValue = mean value (i.e <x>) of the gaussian distribution
// deviation = standard deviation (i.e. sqrt(<x^2>-<x>^2)) of the gaussian distribution
// return value = random number

inline double AbstractRandomNumberGenerator::GetGaussianRandomNumber (double meanValue, double deviation)
{
  return ((this->GetGaussianRandomNumber() * deviation) + meanValue);
}

#endif
