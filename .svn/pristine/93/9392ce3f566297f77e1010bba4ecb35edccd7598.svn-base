////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                                                                            //
//                            DiagHam  version 0.01                           //
//                                                                            //
//                  Copyright (C) 2001-2002 Nicolas Regnault                  //
//                                                                            //
//                                                                            //
//    class of random number generator based on the stdlib rand function      //
//                                                                            //
//                        last modification : 15/09/2004                      //
//                                                                            //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the GNU General Public License as published by    //
//    the Free Software Foundation; either version 2 of the License, or       //
//    (at your option) any later version.                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//    GNU General Public License for more details.                            //
//                                                                            //
//    You should have received a copy of the GNU General Public License       //
//    along with this program; if not, write to the Free Software             //
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#ifndef STDLIBRANDOMNUMBERGENERATOR_H
#define STDLIBRANDOMNUMBERGENERATOR_H


#include "config.h"
#include "MathTools/RandomNumber/AbstractRandomNumberGenerator.h"

#include <stdlib.h>


#define INV_RAND_MAX 1.0 / (1.0 + RAND_MAX)


class StdlibRandomNumberGenerator: public AbstractRandomNumberGenerator
{

 protected :

  // number of generated random numbers
  unsigned long NbrGeneratedNumbers;

 public:

  // constructor
  //
  // seed = optional seed definition (0 if none)
  StdlibRandomNumberGenerator(const unsigned int& seed);

  // copy constructor
  //
  // generator = generator to copy
  StdlibRandomNumberGenerator(const StdlibRandomNumberGenerator& generator);

  // destructor
  //
  ~StdlibRandomNumberGenerator();

  // clone random number generator 
  //
  // return value = clone of the random number generator
  AbstractRandomNumberGenerator* Clone ();

  // set seed of the random number generator
  //
  // seed = new seed
  void SetSeed(const unsigned long& seed);
  
  // get real random number between 0 and 1
  //
  // return value = random number
  double GetRealRandomNumber();

  // get integer random number between 0 and GetMaxInteger
  //
  // return value = random number
  unsigned long GetIntegerRandomNumber();
  
  // get maximum integer value that can be returned by GetIntegerRandomNumber
  //
  // return value = maximum integer
  unsigned long GetMaxInteger();

  // get the number of random numbers that have been generated by the current generator
  //
  // return value = number of generated random numbers
  unsigned long GetNbrGeneratedNumbers();
  
};

// set seed of the random number generator
//
// seed = new seed

inline void StdlibRandomNumberGenerator::SetSeed(const unsigned long& seed)
{
  srand((unsigned int) seed);
}
  
// get real random number between 0 and 1
//
// return value = random number

inline double StdlibRandomNumberGenerator::GetRealRandomNumber()
{
  ++this->NbrGeneratedNumbers;
  return (rand() * INV_RAND_MAX);
}

// get integer random number between 0 and GetMaxInteger
//
// return value = random number

inline unsigned long StdlibRandomNumberGenerator::GetIntegerRandomNumber()
{
  ++this->NbrGeneratedNumbers;
  return rand();
}

// get maximum integer value that can be returned by GetIntegerRandomNumber
//
// return value = maximum integer

inline unsigned long StdlibRandomNumberGenerator::GetMaxInteger()
{
  return RAND_MAX;
}

// get the number of random numbers that have been generated by the current generator
//
// return value = number of generated random numbers

inline unsigned long StdlibRandomNumberGenerator::GetNbrGeneratedNumbers()
{
  return this->NbrGeneratedNumbers;
}

#endif
