<html>
  <head>
    <title>OneSpaceTensor</title>
  </head>

  <body>
    <H1><DIV align=center>Class : OneSpaceTensor</DIV></H1>

<DIV ALIGN="CENTER">class deriving from <A HREF="/home/regnault/development/Physics/DiagHam/docs/Tensor/Tensor.html">Tensor</A></DIV><BR>
<H3>OneSpaceTensor :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Tensor/OneSpaceTensor.html">OneSpaceTensor</A>  ()<BR><BR>
<u>description:</u>default constructor 
<BR>
<BR><BR><BR><H3>OneSpaceTensor :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Tensor/OneSpaceTensor.html">OneSpaceTensor</A>  (<A HREF="/home/regnault/development/Physics/DiagHam/docs/TensorProduct/AbstractTensorProductStructure.html">AbstractTensorProductStructure</A>* , <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/Matrix.html">Matrix</A>& , int targetSpace )<BR><BR>
<u>description:</u>constructor from standard datas 
<BR><BR><BR>
<u>input parameters:</u>
<BR>struture = reference on tensor product structure 
<BR>elementaryMatrix = reference on matrix to use 
<BR>targetSpace = space on which matrix acts 
<BR>
<BR><BR><BR><H3>OneSpaceTensor :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Tensor/OneSpaceTensor.html">OneSpaceTensor</A>  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Tensor/OneSpaceTensor.html">OneSpaceTensor</A>& M )<BR><BR>
<u>description:</u>copy constructor (without duplicating datas) 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M = matrix to copy 
<BR>
<BR><BR><BR><H3>~OneSpaceTensor :</H3>
<u>prototype:</u>     ~OneSpaceTensor  ()<BR><BR>
<u>description:</u>destructor 
<BR>
<BR><BR><BR><H3>operator = :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Tensor/OneSpaceTensor.html">OneSpaceTensor</A>& operator =  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Tensor/OneSpaceTensor.html">OneSpaceTensor</A>& M )<BR><BR>
<u>description:</u>assignement (without duplicating datas) 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M = matrix to copy 
<BR><BR><BR>
<u>return value:</u> reference on modified matrix 
<BR>
<BR><BR><BR><H3>Clone :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/Matrix.html">Matrix</A>* Clone  ()<BR><BR>
<u>description:</u>return pointer on a clone matrix (without duplicating datas) 
<BR><BR><BR>
<u>input parameters:</u>
<BR>retrun value = pointer on new matrix  
<BR>
<BR><BR><BR><H3>SetMatrixElement :</H3>
<u>prototype:</u>     void SetMatrixElement  (int , int , double x )<BR><BR>
<u>description:</u>set a matrix element 
<BR><BR><BR>
<u>input parameters:</u>
<BR>i = line position 
<BR>j = column position 
<BR>x = new value for matrix element 
<BR>
<BR><BR><BR><H3>SetMatrixElement :</H3>
<u>prototype:</u>     void SetMatrixElement  (int , int , const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Complex.html">Complex</A>& x )<BR><BR>
<u>description:</u>set a matrix element 
<BR><BR><BR>
<u>input parameters:</u>
<BR>i = line position 
<BR>j = column position 
<BR>x = new value for matrix element 
<BR>
<BR><BR><BR><H3>AddToMatrixElement :</H3>
<u>prototype:</u>     void AddToMatrixElement  (int , int , double x )<BR><BR>
<u>description:</u>add a value to a matrix element 
<BR><BR><BR>
<u>input parameters:</u>
<BR>i = line position 
<BR>j = column position 
<BR>x = value to add to matrix element 
<BR>
<BR><BR><BR><H3>AddToMatrixElement :</H3>
<u>prototype:</u>     void AddToMatrixElement  (int , int , const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Complex.html">Complex</A>& x )<BR><BR>
<u>description:</u>add a value  a matrix element 
<BR><BR><BR>
<u>input parameters:</u>
<BR>i = line position 
<BR>j = column position 
<BR>x = value to add to matrix element 
<BR>
<BR><BR><BR><H3>Resize :</H3>
<u>prototype:</u>     void Resize  (int , int nbrColumn )<BR><BR>
<u>description:</u>Resize matrix 
<BR><BR><BR>
<u>input parameters:</u>
<BR>nbrRow = new number of rows 
<BR>nbrColumn = new number of columns 
<BR>
<BR><BR><BR><H3>ResizeAndClean :</H3>
<u>prototype:</u>     void ResizeAndClean  (int , int nbrColumn )<BR><BR>
<u>description:</u>Resize matrix and set to zero all elements that have been added 
<BR><BR><BR>
<u>input parameters:</u>
<BR>nbrRow = new number of rows 
<BR>nbrColumn = new number of columns 
<BR>
<BR><BR><BR><H3>Resize :</H3>
<u>prototype:</u>     void Resize  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/TensorProduct/TensorProductStructure.html">TensorProductStructure</A>& structure )<BR><BR>
<u>description:</u>Resize tensor 
<BR><BR><BR>
<u>input parameters:</u>
<BR>structure = new product tensor structure 
<BR>
<BR><BR><BR><H3>ResizeAndClean :</H3>
<u>prototype:</u>     void ResizeAndClean  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/TensorProduct/TensorProductStructure.html">TensorProductStructure</A>& structure )<BR><BR>
<u>description:</u>Resize tensor and set to zero all components that have been added 
<BR><BR><BR>
<u>input parameters:</u>
<BR>structure = new product tensor structure 
<BR>
<BR><BR><BR><H3>Tr :</H3>
<u>prototype:</u>     double Tr  ()<BR><BR>
<u>description:</u>evaluate matrix trace 
<BR><BR><BR>
<u>input parameters:</u>
<BR><BR><BR>
<u>return value:</u> matrix trace  
<BR>
<BR><BR><BR><H3>Det :</H3>
<u>prototype:</u>     double Det  ()<BR><BR>
<u>description:</u>evaluate matrix determinant 
<BR><BR><BR>
<u>input parameters:</u>
<BR><BR><BR>
<u>return value:</u> matrix determinant  
<BR>
<BR><BR><BR>	Back to <A HREF="/home/regnault/development/Physics/DiagHam/docs/index.html">index</A>. 

  </body>
</html>
