<html>
  <head>
    <title>BlockDiagonalMatrix</title>
  </head>

  <body>
    <H1><DIV align=center>Class : BlockDiagonalMatrix</DIV></H1>

<DIV ALIGN="CENTER">class deriving from <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/Matrix.html">Matrix</A></DIV><BR>
<H3>BlockDiagonalMatrix :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>  ()<BR><BR>
<u>description:</u>default constructor 
<BR>
<BR><BR><BR><H3>BlockDiagonalMatrix :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>  (int , bool zero = false )<BR><BR>
<u>description:</u>constructor for an empty matrix 
<BR><BR><BR>
<u>input parameters:</u>
<BR>dimension = matrix dimension 
<BR>zero = true if matrix has to be filled with zeros 
<BR>
<BR><BR><BR><H3>BlockDiagonalMatrix :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>  (List<Matrix*>& blocks )<BR><BR>
<u>description:</u>constructor from matrix elements (without duplicating datas) 
<BR><BR><BR>
<u>input parameters:</u>
<BR>blocks =  reference on list of pointers to matirx to use as block 
<BR>
<BR><BR><BR><H3>BlockDiagonalMatrix :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>  (List<Matrix*>& , int* , int* columnPosition )<BR><BR>
<u>description:</u>constructor from matrix elements and block positions (without duplicating datas) 
<BR><BR><BR>
<u>input parameters:</u>
<BR>blocks = reference on list of pointers to matirx to use as block 
<BR>rowPosition = array containing block row positions 
<BR>columnPosition = array containing block column positions 
<BR>
<BR><BR><BR><H3>BlockDiagonalMatrix :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& M )<BR><BR>
<u>description:</u>copy constructor (without duplicating datas) 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M = matrix to copy 
<BR>
<BR><BR><BR><H3>~BlockDiagonalMatrix :</H3>
<u>prototype:</u>     ~BlockDiagonalMatrix  ()<BR><BR>
<u>description:</u>destructor 
<BR>
<BR><BR><BR><H3>operator = :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& operator =  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& M )<BR><BR>
<u>description:</u>assignement (without duplicating datas) 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M = matrix to copy 
<BR><BR><BR>
<u>return value:</u> reference on modified matrix 
<BR>
<BR><BR><BR><H3>Clone :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/Matrix.html">Matrix</A>* Clone  ()<BR><BR>
<u>description:</u>return pointer on a clone matrix (without duplicating datas) 
<BR><BR><BR>
<u>input parameters:</u>
<BR>retrun value = pointer on new matrix  
<BR>
<BR><BR><BR><H3>SetMatrixElement :</H3>
<u>prototype:</u>     void SetMatrixElement  (int , int , double x )<BR><BR>
<u>description:</u>set a matrix element 
<BR><BR><BR>
<u>input parameters:</u>
<BR>i = line position 
<BR>j = column position 
<BR>x = new value for matrix element 
<BR>
<BR><BR><BR><H3>SetMatrixElement :</H3>
<u>prototype:</u>     void SetMatrixElement  (int , int , const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Complex.html">Complex</A>& x )<BR><BR>
<u>description:</u>set a matrix element 
<BR><BR><BR>
<u>input parameters:</u>
<BR>i = line position 
<BR>j = column position 
<BR>x = new value for matrix element 
<BR>
<BR><BR><BR><H3>AddToMatrixElement :</H3>
<u>prototype:</u>     void AddToMatrixElement  (int , int , double x )<BR><BR>
<u>description:</u>add a value to a matrix element 
<BR><BR><BR>
<u>input parameters:</u>
<BR>i = line position 
<BR>j = column position 
<BR>x = value to add to matrix element 
<BR>
<BR><BR><BR><H3>AddToMatrixElement :</H3>
<u>prototype:</u>     void AddToMatrixElement  (int , int , const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Complex.html">Complex</A>& x )<BR><BR>
<u>description:</u>add a value  a matrix element 
<BR><BR><BR>
<u>input parameters:</u>
<BR>i = line position 
<BR>j = column position 
<BR>x = value to add to matrix element 
<BR>
<BR><BR><BR><H3>operator :</H3>
<u>prototype:</u>     double& operator  ( )<BR><BR>
<u>description:</u>get reference of a given matrix element 
<BR><BR><BR>
<u>input parameters:</u>
<BR>i = line position 
<BR>j = column position 
<BR><BR><BR>
<u>return value:</u> reference om matrix elememt 
<BR>
<BR><BR><BR><H3>operator [] :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/Matrix.html">Matrix</A>* operator []  (int i )<BR><BR>
<u>description:</u>get pointer to a given block 
<BR><BR><BR>
<u>input parameters:</u>
<BR>i = block position 
<BR><BR><BR>
<u>return value:</u> pointer to the block 
<BR>
<BR><BR><BR><H3>Resize :</H3>
<u>prototype:</u>     void Resize  (int , int nbrColumn )<BR><BR>
<u>description:</u>Resize matrix 
<BR><BR><BR>
<u>input parameters:</u>
<BR>nbrRow = new number of rows 
<BR>nbrColumn = new number of columns 
<BR>
<BR><BR><BR><H3>ResizeAndClean :</H3>
<u>prototype:</u>     void ResizeAndClean  (int , int nbrColumn )<BR><BR>
<u>description:</u>Resize matrix and set to zero all elements that have been added 
<BR><BR><BR>
<u>input parameters:</u>
<BR>nbrRow = new number of rows 
<BR>nbrColumn = new number of columns 
<BR>
<BR><BR><BR><H3>operator += :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& operator +=  (<A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/Matrix.html">Matrix</A>* M )<BR><BR>
<u>description:</u>add a block 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M = pointer to the matrix to add as a block 
<BR><BR><BR>
<u>return value:</u> reference on current matrix 
<BR>
<BR><BR><BR><H3>operator + :</H3>
<u>prototype:</u>     <i>friend</i> <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A> operator +  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& , 
  const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& M2 )<BR><BR>
<u>description:</u>add two matrices 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M1 = first matrix 
<BR>M2 = second matrix 
<BR><BR><BR>
<u>return value:</u> sum of the two matrices 
<BR>
<BR><BR><BR><H3>operator - :</H3>
<u>prototype:</u>     <i>friend</i> <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A> operator -  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& , 
  const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& M2 )<BR><BR>
<u>description:</u>substract two matrices 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M1 = first matrix 
<BR>M2 = matrix to substract to M1 
<BR><BR><BR>
<u>return value:</u> difference of the two matrices 
<BR>
<BR><BR><BR><H3>operator * :</H3>
<u>prototype:</u>     <i>friend</i> <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A> operator *  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& , double x )<BR><BR>
<u>description:</u>multiply a matrix by a real number (right multiplication) 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M = source matrix 
<BR>x = real number to use 
<BR><BR><BR>
<u>return value:</u> product result 
<BR>
<BR><BR><BR><H3>operator * :</H3>
<u>prototype:</u>     <i>friend</i> <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A> operator *  (double , const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& M )<BR><BR>
<u>description:</u>multiply a matrix by a real number (left multiplication) 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M = source matrix 
<BR>x = real number to use 
<BR><BR><BR>
<u>return value:</u> product result 
<BR>
<BR><BR><BR><H3>operator / :</H3>
<u>prototype:</u>     <i>friend</i> <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A> operator /  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& , double x )<BR><BR>
<u>description:</u>divide a matrix by a real number (right multiplication) 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M = source matrix 
<BR>x = real number to use 
<BR><BR><BR>
<u>return value:</u> division result 
<BR>
<BR><BR><BR><H3>operator += :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& operator +=  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& M )<BR><BR>
<u>description:</u>add two matrices 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M = matrix to add to current matrix 
<BR><BR><BR>
<u>return value:</u> reference on current matrix 
<BR>
<BR><BR><BR><H3>operator -= :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& operator -=  (const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& M )<BR><BR>
<u>description:</u>substract two matrices 
<BR><BR><BR>
<u>input parameters:</u>
<BR>M = matrix to substract to current matrix 
<BR><BR><BR>
<u>return value:</u> reference on current matrix 
<BR>
<BR><BR><BR><H3>operator *= :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& operator *=  (double x )<BR><BR>
<u>description:</u>multiply a matrix by a real number 
<BR><BR><BR>
<u>input parameters:</u>
<BR>x = real number to use 
<BR><BR><BR>
<u>return value:</u> reference on current matrix 
<BR>
<BR><BR><BR><H3>operator /= :</H3>
<u>prototype:</u>     <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& operator /=  (double x )<BR><BR>
<u>description:</u>divide a matrix by a real number 
<BR><BR><BR>
<u>input parameters:</u>
<BR>x = real number to use 
<BR><BR><BR>
<u>return value:</u> reference on current matrix 
<BR>
<BR><BR><BR><H3>MatrixElement :</H3>
<u>prototype:</u>     double MatrixElement  (<A HREF="/home/regnault/development/Physics/DiagHam/docs/Vector/RealVector.html">RealVector</A>& , <A HREF="/home/regnault/development/Physics/DiagHam/docs/Vector/RealVector.html">RealVector</A>& V2 )<BR><BR>
<u>description:</u>evaluate matrix element 
<BR><BR><BR>
<u>input parameters:</u>
<BR>V1 = vector to left multiply with current matrix 
<BR>V2 = vector to right multiply with current matrix 
<BR><BR><BR>
<u>return value:</u> corresponding matrix element 
<BR>
<BR><BR><BR><H3>Tr :</H3>
<u>prototype:</u>     double Tr  ()<BR><BR>
<u>description:</u>evaluate matrix trace 
<BR><BR><BR>
<u>input parameters:</u>
<BR><BR><BR>
<u>return value:</u> matrix trace  
<BR>
<BR><BR><BR><H3>Det :</H3>
<u>prototype:</u>     double Det  ()<BR><BR>
<u>description:</u>evaluate matrix determinant 
<BR><BR><BR>
<u>input parameters:</u>
<BR><BR><BR>
<u>return value:</u> matrix determinant  
<BR>
<BR><BR><BR><H3>operator << :</H3>
<u>prototype:</u>     <i>friend</i> ostream& operator <<  (ostream& , const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& P )<BR><BR>
<u>description:</u>Output Stream overload 
<BR><BR><BR>
<u>input parameters:</u>
<BR>Str = reference on output stream 
<BR>P = matrix to print 
<BR><BR><BR>
<u>return value:</u> reference on output stream 
<BR>
<BR><BR><BR><H3>operator << :</H3>
<u>prototype:</u>     <i>friend</i> <A HREF="/home/regnault/development/Physics/DiagHam/docs/Output/MathematicaOutput.html">MathematicaOutput</A>& operator <<  (<A HREF="/home/regnault/development/Physics/DiagHam/docs/Output/MathematicaOutput.html">MathematicaOutput</A>& , const <A HREF="/home/regnault/development/Physics/DiagHam/docs/Matrix/BlockDiagonalMatrix.html">BlockDiagonalMatrix</A>& P )<BR><BR>
<u>description:</u>Mathematica Output Stream overload 
<BR><BR><BR>
<u>input parameters:</u>
<BR>Str = reference on Mathematica output stream 
<BR>P = matrix to print 
<BR><BR><BR>
<u>return value:</u> reference on output stream 
<BR>
<BR><BR><BR>	Back to <A HREF="/home/regnault/development/Physics/DiagHam/docs/index.html">index</A>. 

  </body>
</html>
